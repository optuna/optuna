name: examples

on:
  schedule:
    - cron: '0 15 * * *'

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8]

    if: github.repository == 'optuna/optuna'
    steps:
    - uses: actions/checkout@v2
    - name: setup-python${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup cache
      uses: actions/cache@v2
      env:
        cache-name: daily-example
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('**/setup.py') }}-v1
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('**/setup.py') }}
    - name: Install (apt)
      run: |
        sudo apt-get update
        sudo apt-get -y install openmpi-bin libopenmpi-dev
    - name: Install (Python)
      run: |
        python -m pip install --upgrade pip
        pip install --progress-bar off -U setuptools
        python setup.py sdist

        # Install minimal dependencies and confirm that `import optuna` is successful.
        pip install --progress-bar off $(ls dist/*.tar.gz)
        python -c 'import optuna'

        # Install all dependencies needed for examples.
        pip install --progress-bar off $(ls dist/*.tar.gz)[example] -f https://download.pytorch.org/whl/torch_stable.html
    - name: Run examples
      run: |
        # TODO(hvy): Stop ignoring allennlp_jsonnet.py when https://github.com/optuna/optuna/issues/1526 is resolved.
        if [ ${{ matrix.python-version }} = 3.5 ]; then
          IGNORES='chainermn_.*|pytorch_lightning.*|fastai_.*|catalyst_.*|sb3_.*|allennlp|pytorch_simple|pytorch_ignite_simple'
        elif [ ${{ matrix.python-version }} = 3.8 ]; then
          IGNORES='chainermn_.*|dask_ml_.*|keras_.*|tensorboard_.*|tensorflow_.*|tfkeras_.*|fastai_.*|allennlp'
        else
          IGNORES='chainermn_.*|allennlp_jsonnet.py'
        fi

        for file in `find examples -name '*.py' -not -name '*_distributed.py' | grep -vE "$IGNORES"`
        do
          echo $file
          python $file > /dev/null
          if grep -e '\-\-pruning' $file > /dev/null; then
            echo $file --pruning
            python $file --pruning > /dev/null
          fi
        done
      env:
        OMP_NUM_THREADS: 1
    - name: Run Jupyter notebook examples
      run: |
        for file in `find examples -name '*.ipynb'`
        do
          echo $file
          pytest --nbval-lax $file > /dev/null
        done
      env:
        OMP_NUM_THREADS: 1
    - name: Run multi-node examples
      run: |
        STORAGE_URL=sqlite:///example.db
        for file in `find examples -name 'chainermn_*.py'`
        do
          echo $file
          STUDY_NAME=`optuna create-study --storage $STORAGE_URL`
          mpirun -n 2 -- python $file $STUDY_NAME $STORAGE_URL > /dev/null
        done
      env:
        OMP_NUM_THREADS: 1
