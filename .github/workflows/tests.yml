name: Tests

on:
  push:
    branches:
      - master
  pull_request: {}
  schedule:
    - cron: '0 23 * * SUN-THU'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/master' && github.run_number || github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    if: (github.event_name == 'schedule' && github.repository == 'optuna/optuna') || (github.event_name != 'schedule')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Python${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup cache
      uses: actions/cache@v3
      env:
        cache-name: test
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('**/pyproject.toml') }}-v1
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('**/pyproject.toml') }}


    - name: Setup pip
      run: |
        python -m pip install --upgrade pip
        pip install --progress-bar off -U setuptools

    # TODO(c-bata): Remove the version constraint on fakeredis
    - name: Install
      run: |
        # Install minimal dependencies and confirm that `import optuna` is successful.
        pip install --progress-bar off .
        python -c 'import optuna'
        optuna --version

        pip install --progress-bar off .[test]
        pip install --progress-bar off .[optional]
        pip install "fakeredis<2.11.1"

    - name: Output installed packages
      run: |
        pip freeze --all

    - name: Scheduled tests
      if:  ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
      run: |
        pytest tests -m "not integration"
      env:
        SQLALCHEMY_WARN_20: 1

    - name: Tests
      if:  ${{ github.event_name != 'schedule' && github.event_name != 'workflow_dispatch' }}
      run: |
        pytest tests -m "not integration and not slow"
      env:
        SQLALCHEMY_WARN_20: 1
